--!20% + 500 rows changes will update statistics

USE [master];

ALTER DATABASE [DEMO] 
SET auto_create_statistics ON;

ALTER DATABASE [DEMO] 
SET auto_update_statistics ON WITH no_wait;

--Check if update statistics is enabled
SELECT [name], 
       CASE WHEN is_auto_create_stats_on = 1 THEN 'Enabled' ELSE 'Disabled' END AS 'Auto Create Statistics', 
       CASE WHEN is_auto_update_stats_on = 1 THEN 'Enabled' ELSE 'Disabled' END AS 'Auto Update Statistics' 
FROM sys.databases 
WHERE database_id > 4 --not system databases

USE DEMO;

--Stats_ID: It is the unique ID of the statistics object
--Name: It is the statistics name
--Last_updated: It is the date and time of the last statistics update
--Rows: It shows the total number of rows at the time of the last statistics update
--Rows_sampled: It gives the total number of sample rows for the statistics
--Unfiltered_rows: In the screenshot, you can see both rows_sampled and unfiltered_rows value the same because we did not use any filter in the statistics
--Modification_counter: It is a vital column to look. We get the total number of modifications since the last statistics update

SELECT sp.stats_id, 
       t.[name],
       s.[name], 
       s.filter_definition, 
       sp.last_updated, 
       sp.rows, 
       sp.rows_sampled, 
       sp.steps, 
       sp.unfiltered_rows, 
       sp.modification_counter
FROM sys.stats AS s
INNER JOIN sys.tables t 
    ON t.object_id = s.object_id
CROSS APPLY sys.dm_db_stats_properties(s.[object_id], s.stats_id) AS sp
WHERE s.[object_id] = OBJECT_ID('dbo.IndexTest')
--and s.[name] like '_WA%' -- to filter autocreated statistics
;

--Statistics update
UPDATE STATISTICS dbo.IndexTest;--for table
UPDATE STATISTICS dbo.IndexTest PK_IndexTest_id; --for specific index

--If we want mandatory FULL SCAN we can use 
UPDATE STATISTICS dbo.IndexTest PK_IndexTest_id WITH FULLSCAN;
--OR
UPDATE STATISTICS dbo.IndexTest PK_IndexTest_id WITH SAMPLE 100 PERCENT;

--By default columns statistics is not updated
UPDATE STATISTICS dbo.IndexTest PK_IndexTest_id WITH FULLSCAN, COLUMNS;

--To update statistics for all tables
EXEC sp_updatestats

DBCC SHOW_STATISTICS('dbo.IndexTest', 'PK_IndexTest_id') WITH STAT_HEADER;  -- or _WA if you need autogenerated
EXEC Sp_helpstats 'PK_IndexTest_id'

--Incremental statistics
--Check if enabled
SELECT i.name AS Index_name,
	   i.Type_Desc AS Type_Desc,
	   ds.name AS DataSpaceName,
	   ds.type_desc AS DataSpaceTypeDesc,
	   st.is_incremental
FROM sys.objects AS o
JOIN sys.indexes AS i 
    ON o.object_id = i.object_id
JOIN sys.data_spaces ds 
    ON ds.data_space_id = i.data_space_id
JOIN sys.stats st
    ON st.object_id = o.object_id AND st.name = i.name
LEFT OUTER JOIN sys.dm_db_index_usage_stats AS s 
    ON i.object_id = s.object_id 
AND i.index_id = s.index_id AND s.database_id = DB_ID()
WHERE o.type = 'U'
  AND i.type <= 2
  AND o.object_id = OBJECT_ID('dbo.IndexTest')

--Enabling Incremental Statistics for database
USE [master];
ALTER DATABASE [DEMO] SET AUTO_CREATE_STATISTICS ON (INCREMENTAL = ON);

USE DEMO;
--
UPDATE STATISTICS DEMO.dbo.IndexTest 
(PK_IndexTest_id) WITH INCREMENTAL = ON;

--Update statistics on partition
UPDATE STATISTICS DEMO.dbo.IndexTest 
(PK_IndexTest_id) WITH RESAMPLE ON PARTITIONS(1,5); -- with range of partitions
-- could be checked in sys.partitions for current table

--Check if incremental statistics is collected for an object
SELECT OBJECT_NAME([object_id]) table_name,
       [name] index_name,
       is_incremental,
       stats_id
FROM sys.stats
WHERE name = 'PK_IndexTest_id';


SELECT s.stats_id StatsID,
       s.name StatsName,
       sc.stats_column_id StatsColID,
       c.name ColumnName 
FROM sys.stats s 
INNER JOIN sys.stats_columns sc
    ON s.object_id = sc.object_id AND s.stats_id = sc.stats_id
INNER JOIN sys.columns c
    ON sc.object_id = c.object_id AND sc.column_id = c.column_id
WHERE OBJECT_NAME(s.object_id) = 'IndexTest'
ORDER BY s.stats_id, sc.column_id;

--* StatsID StatsName       StatsColID ColumnName
--* 1       PK_IndexTest_id 1          Id

--! Column-based statistics objects
-- SQL Server generates a statistics object when you include a column in a query predicate such as a WHERE clause. 
SELECT * 
FROM dbo.IndexTest
WHERE [Value] like '%Guo'

-- If we run above query once again
--* StatsID StatsName                 StatsColID ColumnName
--* 1       PK_IndexTest_id           1          Id
--? 2       _WA_Sys_00000002_5EDF0F2E 1          Value

--! Index-based statistics objects
CREATE INDEX NCI_IndexTest_Value ON dbo.IndexTest ([Value]);
-- If we run above query once again
--* StatsID StatsName                 StatsColID ColumnName
--* 1       PK_IndexTest_id           1          Id
--* 2       _WA_Sys_00000002_5EDF0F2E 1          Value
--? 3       NCI_IndexTest_Value       2          Id
--? 3       NCI_IndexTest_Value       1          Value

--! Statistics histograms
-- By default, the DBCC SHOW_STATISTICS statement returns the following three types of information:
-- Header: 
-- Name of the statistics object, date and time it was last updated, number of rows in the 
-- participating columns, actual number of sampled rows, number of steps within the histogram, 
-- and other information
-- Densities: 
-- Density vector of the indexed columns based on the formula 1/#_distinct_values. 
-- The number of distinct values help to determine the selectivity of the column values. 
-- The more unique values, the higher the selectivity and the more effective the index. 
-- The number of rows in this section depends on the number of participating columns.
-- Histogram: 
-- Value distribution across the column data, incremented in steps based on the 
-- number of rows, up to 200 steps per statistics object.
DBCC SHOW_STATISTICS (IndexTest, PK_IndexTest_id);

--* Name            Updated             Rows    Rows Sampled  Steps Density  Average key length  String Index  Filter Expression  Unfiltered Rows  Persisted Sample Percent
--* PK_IndexTest_id Dec  2 2020  8:54AM 24568   20853         78    1        4	                 NO            NULL               24568            0
-- 
-- In this case, the histogram is broken into 78 steps, based on ranges of data in the first indexed column, id. 
-- Each step is listed in its own row in the histogram and represents a range of values. 
-- For example, the value in the RANGE_HI_KEY column of row 7 (the highlighted row) is 1743. 
-- This value represents the highest value in a data range that includes all values from 1371 (row 6 + 1) through 1743.
-- 
--*   RANGE_HI_KEY  RANGE_ROWS  EQ_ROWS  DISTINCT_RANGE_ROWS  AVG_RANGE_ROWS
--* 6 1370          111.988     1	     112                  1
--* 7 1743          413.7661    1	     372                  1.112274
-- 
-- The histogram also includes the RANGE_ROWS column, which provides the number of rows within the range, 
-- excluding the rows associated with the RANGE_HI_KEY value, the upper end of the range. 
-- In this case, there are 413.7661 rows in the range, excluding the upper range value. 
-- However, the EQ_ROWS value indicates the number of rows that are associated with the upper end value. 
-- That means 1 rows have a the id value of 1743.
-- 
-- The DISTINCT_RANGE_ROWS column shows the number of unique values within the current range, 
-- once again excluding the upper range value. As a result, the range of values from 1371 through 1742 
-- includes 372 unique values.
-- 
-- Finally, the AVG_RANGE_ROWS column shows the average number of rows for each distinct value, 
-- based on the formula range_rows/distinct_range_rows, once again excluding the upper end rows. 
-- This gives us an average of over 1 row for each distinct value within the range.

SET STATISTICS PROFILE, XML ON;

SELECT * 
FROM dbo.IndexTest
WHERE Id = 1743
OPTION(RECOMPILE);

SET STATISTICS PROFILE,XML OFF;

--* EstimateRows="1" EstimatedRowsRead="1"
-- Same as EQ_ROWS for row 7 of DBCC output

--! Creating statistics

CREATE STATISTICS not_aaa ON dbo.IndexTest ([Value])  
WHERE [Value] != 'aaaa...a'
WITH FULLSCAN;

--* StatsID StatsName                  StatsColID ColumnName
--* 1       PK_IndexTest_id            1          Id
--* 2       _WA_Sys_00000002_5EDF0F2E  1          Value
--* 3       NCI_IndexTest_Value        2          Id
--* 3       NCI_IndexTest_Value        1          Value
--? 4       not_aaa                    1          Value
-- Here it is!
